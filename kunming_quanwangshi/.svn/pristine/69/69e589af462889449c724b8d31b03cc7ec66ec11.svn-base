function getSmartCardId(){
	if(window.useDebugCard){
		return window.debugCardNumber;
	}
	if(typeof GHWEBAPI != 'undefined'){
		var ret = GHWEBAPI.GetParam('CardID');
		if(ret.ResultCode == 0){
			return ret.ParamValue;
		} else {
			log(ret.Description);
		}
	} else if(typeof CA != 'undefined'){
		return CA.card.serialNumber;
	}
	return '';
}

function isNotEmpty(val){
	return val != null && val != '';
}

function setupPaaS(callback){
	my.paas.host = paasHost;
	my.paas.appKey = paasAppKey;
	my.paas.appSecret = paasAppSecret;
	my.paas.tokenRefreshInterval = paasTokenRefreshInterval;
	var storage = MyStorage.getStorage();
	storage.setNamespace('xor.kgqws');
	my.paas.storage = storage;
	var access_token = storage.getValue('access_token');
	var refresh_token = storage.getValue('refresh_token');
	var user_id = storage.getValue('user_id');
	var user_name = getSmartCardId();
	my.paas.user_name = user_name;
	if(isNotEmpty(user_id) && isNotEmpty(access_token) && isNotEmpty(refresh_token)){
		my.paas.user_id = user_id;
		my.paas.access_token = access_token;
		my.paas.refresh_token = refresh_token;
		my.paas.checkToken(callback);
	} else {
		my.paas.directLogin(user_name, callback, true);
	}
}

function parseAssetPoster(asset, index){
	var poster = '';
	var posters = asset && (typeof asset.posterboard == 'string') && asset.posterboard.split(',') || [];
	index = index != null ? index : posters.length-1;
	poster = posters[index];
	if(poster == null){
		poster = '';
	}
	return poster;
}

function parseBundlePoster(bundle, index){
	var poster = '';
	var posters = bundle && (typeof bundle.packageposterboard == 'string') && bundle.packageposterboard.split(',') || [];
	index = index != null ? index : posters.length-1;
	poster = posters[index];
	if(poster == null){
		poster = '';
	}
	return poster;
}

function getVodData(ids, callback, async){
	var url = my.paas.host + '/aquapaas/rest/search/content_by_id/vod?ids=' + ids.join(',');
	try{
		my.paas.request({
			type: 'GET',
			url: url,
			headers: {
				'Accept': 'application/json',
				'Content-Type': 'application/json'
			},
			async: !!async,
			done: function(vods){
				vods = JSON.parse(vods);
				if(typeof callback == 'function'){
					callback(vods);
				}
			},
			fail: function(){
				if(typeof callback == 'function'){
					callback(null);
				}
			}
		}, ['app']);
	}catch(e){
		log(e.message);
	}
}